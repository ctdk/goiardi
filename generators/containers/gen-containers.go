// build +ignore

/*
 * Copyright (c) 2013-2020, Jeremy Bingham (<jeremy@goiardi.gl>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"sort"
	"strings"
)

const (
	defLen = 7
	kindField = 3
	subKindField = 2
)

const cntrListTemplate = `
// Code generated by generators/containers/gen-containers.go, DO NOT EDIT.

/*
 * Copyright (c) 2013-2020, Jeremy Bingham (<jeremy@goiardi.gl>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package container

import ()

var DefaultContainers = [%d]string{
%s
}
`

func main() {
	if len(os.Args) < 5 {
		log.Fatal("No definition file given")
	}
	defPath := os.Args[2]
	outPath := os.Args[4]

	containers := make(map[string]bool)

	rawDefs, err := ioutil.ReadFile(defPath)
	if err != nil {
		log.Fatal(err)
	}

	defLines := strings.Split(string(rawDefs), "\n")
	for _, l := range defLines {
		l = strings.TrimSpace(l)
		if l == "" {
			continue
		}

		if !strings.HasPrefix(l, "p,") {
			continue
		}

		f := strings.Split(l, ", ")
		if len(f) != defLen {
			log.Fatalf("Def field length mismatch: should have been %d, but got %d instead. Offending definition: '%s'", defLen, len(f), l)
		}

		kind := f[kindField]
		subKind := f[subKindField]

		// all containers are located before the groups. Keep it that
		// way, yo. Also, skip '$$root$$'.
		if kind == "groups" {
			break
		} else if subKind == "$$root$$" {
			continue
		}

		// take the easy way out. Not checking if it's already been set
		// since that might actually slow it down slightly
		containers[subKind] = true
	}

	cnt := len(containers)
	list := make([]string, cnt)
	j := 0
	for k, _ := range containers {
		list[j] = fmt.Sprintf("\t\"%s\",", k)
		j++
	}

	sort.Strings(list)

	outFile, err := os.Create(outPath)
	if err != nil {
		log.Fatal(err)
	}

	genList := fmt.Sprintf(cntrListTemplate, cnt, strings.Join(list, "\n"))
	fmt.Fprintln(outFile, strings.TrimSpace(genList))
}
